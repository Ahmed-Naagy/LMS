// <auto-generated />
using System;
using LMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LMS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210601055127_AME-updateTablesRelations")]
    partial class AMEupdateTablesRelations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AccountGroup", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("membersId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "membersId");

                    b.HasIndex("membersId");

                    b.ToTable("AccountGroup");
                });

            modelBuilder.Entity("BusDriver", b =>
                {
                    b.Property<int>("BusesId")
                        .HasColumnType("int");

                    b.Property<int>("DriversAccountId")
                        .HasColumnType("int");

                    b.HasKey("BusesId", "DriversAccountId");

                    b.HasIndex("DriversAccountId");

                    b.ToTable("BusDriver");
                });

            modelBuilder.Entity("LMS.Models.AccountModel.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relegion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("LMS.Models.Activity.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StudentAccountId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("LMS.Models.AdminModel.Admin", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddmitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddmitionNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Natinality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PDF_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PDF_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("AccountId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("LMS.Models.AnswerModel.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadFile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("LMS.Models.AttendanceModel.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StudentAccountId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("LMS.Models.BusModel.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenceCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberPlate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("LMS.Models.ClassModel.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("LMS.Models.CommentModel.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("LMS.Models.DriverModel.Driver", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("LicenseID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("LMS.Models.FeesModel.Fees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<double>("Fine")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Paid")
                        .HasColumnType("float");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("int");

                    b.Property<string>("PayMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ParentAccountId");

                    b.HasIndex("StudentAccountId");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("LMS.Models.FileModel.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfUPload")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("LMS.Models.FolderModel.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfUpload")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("LMS.Models.GroupModel.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentAccountId");

                    b.HasIndex("TeacherAccountId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("LMS.Models.LibraryModel.BookModel.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PDF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReaderNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LMS.Models.LibraryModel.BorrowModel.Borrow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeacherAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BookId");

                    b.HasIndex("TeacherAccountId");

                    b.ToTable("Borrows");
                });

            modelBuilder.Entity("LMS.Models.LibraryModel.CategoryModel.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LMS.Models.MCQModel.Mcq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.ToTable("Mcqs");
                });

            modelBuilder.Entity("LMS.Models.NoteBordModel.NoteBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StudentAccountId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TaskId");

                    b.ToTable("NoteBoards");
                });

            modelBuilder.Entity("LMS.Models.ParentModel.Parent", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Natinality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PDF_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PDF_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationWithStudent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("LMS.Models.PayRollModel.PayRoll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("PayRolls");
                });

            modelBuilder.Entity("LMS.Models.PhotoModel.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("_Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("LMS.Models.PostModel.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Like")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentAccountId");

                    b.HasIndex("TeacherAccountId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("LMS.Models.QuestionModel.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("LMS.Models.SectionModel.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("LMS.Models.StudentModel.Student", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddmitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddmitionNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BusId")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PDF_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PDF_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("BusId");

                    b.HasIndex("ParentAccountId");

                    b.HasIndex("YearId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("LMS.Models.SubjectModel.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfUPload")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("LMS.Models.TaskModel.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<double>("Degree")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndData")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Statuse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadFile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ParentAccountId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("LMS.Models.TeacherModel.Teacher", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddmitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddmitionNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Natinality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PDF_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PDF_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("AccountId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("LMS.Models.TrueFalseModel.TrueFalse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.ToTable("TrueFalses");
                });

            modelBuilder.Entity("LMS.Models.YearModel.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("LMS.Models.ZoomModel.Zoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StudentAccountId");

                    b.HasIndex("TeacherAccountId");

                    b.ToTable("Zooms");
                });

            modelBuilder.Entity("TeacherYear", b =>
                {
                    b.Property<int>("TeachersAccountId")
                        .HasColumnType("int");

                    b.Property<int>("YearsId")
                        .HasColumnType("int");

                    b.HasKey("TeachersAccountId", "YearsId");

                    b.HasIndex("YearsId");

                    b.ToTable("TeacherYear");
                });

            modelBuilder.Entity("AccountGroup", b =>
                {
                    b.HasOne("LMS.Models.GroupModel.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Models.AccountModel.Account", null)
                        .WithMany()
                        .HasForeignKey("membersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusDriver", b =>
                {
                    b.HasOne("LMS.Models.BusModel.Bus", null)
                        .WithMany()
                        .HasForeignKey("BusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Models.DriverModel.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Models.AccountModel.Account", b =>
                {
                    b.OwnsMany("LMS.Models.RefreshTokenModel.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("AccountId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime2");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("AccountId");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner("Account")
                                .HasForeignKey("AccountId");

                            b1.Navigation("Account");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("LMS.Models.Activity.Activity", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("LMS.Models.StudentModel.Student", null)
                        .WithMany("Activities")
                        .HasForeignKey("StudentAccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("LMS.Models.AdminModel.Admin", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", null)
                        .WithOne("Admin")
                        .HasForeignKey("LMS.Models.AdminModel.Admin", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Models.AnswerModel.Answer", b =>
                {
                    b.HasOne("LMS.Models.QuestionModel.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LMS.Models.AttendanceModel.Attendance", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("LMS.Models.StudentModel.Student", null)
                        .WithMany("Attendances")
                        .HasForeignKey("StudentAccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("LMS.Models.ClassModel.Class", b =>
                {
                    b.HasOne("LMS.Models.YearModel.Year", "Year")
                        .WithMany("Classes")
                        .HasForeignKey("YearId");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("LMS.Models.CommentModel.Comment", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("LMS.Models.PostModel.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.Navigation("Account");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("LMS.Models.DriverModel.Driver", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", null)
                        .WithOne("Driver")
                        .HasForeignKey("LMS.Models.DriverModel.Driver", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Models.FeesModel.Fees", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("LMS.Models.ParentModel.Parent", null)
                        .WithMany("Fees")
                        .HasForeignKey("ParentAccountId");

                    b.HasOne("LMS.Models.StudentModel.Student", null)
                        .WithMany("Fees")
                        .HasForeignKey("StudentAccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("LMS.Models.FileModel.File", b =>
                {
                    b.HasOne("LMS.Models.FolderModel.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("LMS.Models.FolderModel.Folder", b =>
                {
                    b.HasOne("LMS.Models.SubjectModel.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LMS.Models.GroupModel.Group", b =>
                {
                    b.HasOne("LMS.Models.StudentModel.Student", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentAccountId");

                    b.HasOne("LMS.Models.TeacherModel.Teacher", null)
                        .WithMany("Groups")
                        .HasForeignKey("TeacherAccountId");
                });

            modelBuilder.Entity("LMS.Models.LibraryModel.BookModel.Book", b =>
                {
                    b.HasOne("LMS.Models.LibraryModel.CategoryModel.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LMS.Models.LibraryModel.BorrowModel.Borrow", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("LMS.Models.LibraryModel.BookModel.Book", "Book")
                        .WithMany("Borrows")
                        .HasForeignKey("BookId");

                    b.HasOne("LMS.Models.TeacherModel.Teacher", null)
                        .WithMany("Borrows")
                        .HasForeignKey("TeacherAccountId");

                    b.Navigation("Account");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LMS.Models.MCQModel.Mcq", b =>
                {
                    b.HasOne("LMS.Models.AnswerModel.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("LMS.Models.NoteBordModel.NoteBoard", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("LMS.Models.StudentModel.Student", null)
                        .WithMany("NoteBoards")
                        .HasForeignKey("StudentAccountId");

                    b.HasOne("LMS.Models.SubjectModel.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("LMS.Models.TaskModel.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.Navigation("Account");

                    b.Navigation("Subject");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("LMS.Models.ParentModel.Parent", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", null)
                        .WithOne("Parent")
                        .HasForeignKey("LMS.Models.ParentModel.Parent", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Models.PayRollModel.PayRoll", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("LMS.Models.PhotoModel.Photo", b =>
                {
                    b.HasOne("LMS.Models.PostModel.Post", "Post")
                        .WithMany("Photos")
                        .HasForeignKey("PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("LMS.Models.PostModel.Post", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("LMS.Models.GroupModel.Group", null)
                        .WithMany("posts")
                        .HasForeignKey("GroupId");

                    b.HasOne("LMS.Models.StudentModel.Student", null)
                        .WithMany("Posts")
                        .HasForeignKey("StudentAccountId");

                    b.HasOne("LMS.Models.TeacherModel.Teacher", null)
                        .WithMany("Posts")
                        .HasForeignKey("TeacherAccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("LMS.Models.QuestionModel.Question", b =>
                {
                    b.HasOne("LMS.Models.TaskModel.Task", "Task")
                        .WithMany("Questions")
                        .HasForeignKey("TaskId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("LMS.Models.SectionModel.Section", b =>
                {
                    b.HasOne("LMS.Models.ClassModel.Class", "Class")
                        .WithMany("Sections")
                        .HasForeignKey("ClassId");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("LMS.Models.StudentModel.Student", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", null)
                        .WithOne("Student")
                        .HasForeignKey("LMS.Models.StudentModel.Student", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Models.BusModel.Bus", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId");

                    b.HasOne("LMS.Models.ParentModel.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentAccountId");

                    b.HasOne("LMS.Models.YearModel.Year", "Year")
                        .WithMany("Students")
                        .HasForeignKey("YearId");

                    b.Navigation("Bus");

                    b.Navigation("Parent");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("LMS.Models.SubjectModel.Subject", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("LMS.Models.ParentModel.Parent", null)
                        .WithMany("Subjects")
                        .HasForeignKey("ParentAccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("LMS.Models.TaskModel.Task", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("LMS.Models.ParentModel.Parent", null)
                        .WithMany("Tasks")
                        .HasForeignKey("ParentAccountId");

                    b.HasOne("LMS.Models.SubjectModel.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.Navigation("Account");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LMS.Models.TeacherModel.Teacher", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", null)
                        .WithOne("Teacher")
                        .HasForeignKey("LMS.Models.TeacherModel.Teacher", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Models.TrueFalseModel.TrueFalse", b =>
                {
                    b.HasOne("LMS.Models.AnswerModel.Answer", "Answer")
                        .WithMany("TrueFalses")
                        .HasForeignKey("AnswerId");

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("LMS.Models.ZoomModel.Zoom", b =>
                {
                    b.HasOne("LMS.Models.AccountModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("LMS.Models.StudentModel.Student", null)
                        .WithMany("Zooms")
                        .HasForeignKey("StudentAccountId");

                    b.HasOne("LMS.Models.TeacherModel.Teacher", null)
                        .WithMany("Zooms")
                        .HasForeignKey("TeacherAccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TeacherYear", b =>
                {
                    b.HasOne("LMS.Models.TeacherModel.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Models.YearModel.Year", null)
                        .WithMany()
                        .HasForeignKey("YearsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Models.AccountModel.Account", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Driver");

                    b.Navigation("Parent");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LMS.Models.AnswerModel.Answer", b =>
                {
                    b.Navigation("TrueFalses");
                });

            modelBuilder.Entity("LMS.Models.ClassModel.Class", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("LMS.Models.FolderModel.Folder", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("LMS.Models.GroupModel.Group", b =>
                {
                    b.Navigation("posts");
                });

            modelBuilder.Entity("LMS.Models.LibraryModel.BookModel.Book", b =>
                {
                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LMS.Models.LibraryModel.CategoryModel.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LMS.Models.ParentModel.Parent", b =>
                {
                    b.Navigation("Fees");

                    b.Navigation("Students");

                    b.Navigation("Subjects");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("LMS.Models.PostModel.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("LMS.Models.QuestionModel.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("LMS.Models.StudentModel.Student", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Attendances");

                    b.Navigation("Fees");

                    b.Navigation("Groups");

                    b.Navigation("NoteBoards");

                    b.Navigation("Posts");

                    b.Navigation("Zooms");
                });

            modelBuilder.Entity("LMS.Models.TaskModel.Task", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("LMS.Models.TeacherModel.Teacher", b =>
                {
                    b.Navigation("Borrows");

                    b.Navigation("Groups");

                    b.Navigation("Posts");

                    b.Navigation("Zooms");
                });

            modelBuilder.Entity("LMS.Models.YearModel.Year", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
